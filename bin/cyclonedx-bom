#!/usr/bin/env node
/*
 * This file is part of CycloneDX Node Module.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) Steve Springett. All Rights Reserved.
 */
const commander = require('commander');
const program = require('../package.json');
const bomHelpers = require("../index.js");
const fs = require("fs");
const xmlFormat = require("prettify-xml");
const xmlOptions = {indent: 4, newline: "\n"};
const DomParser = require('xmldom').DOMParser;

commander
  .description(program.description)
  .version(program.version, '-v, --version')
  .usage('[OPTIONS] [path]')
  .option('-a, --append <bom.xml>', 'Merge BOM(s) into the current BOM', commaSeparatedList, [])
  .option('-d, --include-dev', "Include devDependencies", false)
  .option('-l, --include-license-text', "Include full license text", false)
  .option('-o, --output <output>', "Write BOM to file", "bom.xml")
  .option('-ns, --no-serial-number', "Do not include BOM serial number", true)
  .parse(process.argv);

function commaSeparatedList(value, previous) {
    return value.split(',');
}

let filePath = commander.args[0] || '.';
let additionalBoms = commander.append;
let includeSerialNumber = commander.serialNumber;
let includeLicenseText = commander.includeLicenseText;
let output = commander.output;

// Options are specific to readinstalled
let options = {};
options.dev = commander.includeDev;

/**
 * Creates a Bom object and writes either XML or JSON.
 */
bomHelpers.createbom(includeSerialNumber, includeLicenseText, filePath, options, (err, bom) => {
    if (bom.components.length === 0) {
        console.log("There are no components in the BOM. The project may not contain dependencies or node_modules does not exist. Executing `npm install` prior to CycloneDX may solve the issue.")
    }
    if (output.endsWith(".xml")) {
        let doc = new DomParser().parseFromString(bom.toXML());
        for (let index = 0; index < additionalBoms.length; index++) {
            let additionalBom = fs.readFileSync(additionalBoms[index], "utf-8");
            let additionalDoc = new DomParser().parseFromString(additionalBom);
            bomHelpers.mergebom(doc, additionalDoc);
        }
        let xmlString = xmlFormat(doc.toString(), xmlOptions);
        fs.writeFile(output, xmlString, () => {});
    } else if (output.endsWith(".json")) {
        let jsonString = JSON.stringify(bom.toJSON(), null, 2);
        fs.writeFile(output, jsonString, () => {});
    } else {
        console.log("Unsupported file extension. Output filename must end with .xml or .json");
        process.exit(1);
    }
});
